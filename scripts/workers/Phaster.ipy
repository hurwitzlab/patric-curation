#!/usr/bin/env python

#This script is intended to take a list of 100 patric genomes
#Submit them to Phaster web api
#Wait 5 minutes
#Check to see if they're all done
#Wait another 5 minutes ... and repeat
#The "worker" bash script should just be splitting up the job array
#and will call this script like so: ipython Phaster.ipy -i $FASTA -o $OUT
#The "launcher" in the scripts dir should be checking for .zip results from phaster
#and then building a list of genomes that still need to be submitted

from __future__ import print_function
import json
import requests
import time
import argparse
import sys
import zipfile

#arguments
if __name__ == "__main__":
    parser = \
    argparse.ArgumentParser(description="Script to take a fasta file \
	1) Submit it to phaster.ca webapi \
        2) And wait a few minutes for results")
    parser.add_argument("-i", "--input", action="store", \
        help="Fasta file input")
    parser.add_argument("-o", "--outPath", action="store", default="./", \
        help="(OPTIONAL) Output path where phaster result zip file will be put. \
        Default: Current directory")
    parser.add_argument("-s", "--saveAs", action="store", \
        help="(OPTIONAL) Save the retrieved zip file of results with custom name. \
        Default: Name of submitted fasta with .fna replaced with .zip")
    parser.add_argument("-x", "--extract", action="store_true", \
        help="(OPTIONAL) Extract the resultant zip file into a directory with the name of the submitted fasta? Default: False")
    
    args = vars(parser.parse_args())

#thing to print help if no arguments given
if len(sys.argv)==1:
    parser.print_help()
    sys.exit(0)

#setting input
fileIn = open(args['input'],'r') 

if args['saveAs'] == None:
    fileNameOut = args['input'].split('/')[1].replace('fna','zip')
else:
    fileNameOut = args['saveAs']

if args['extract'] == True:
    extractDir = fileNameOut.replace('.zip','')

print("Start Time {:s}".format(time.ctime()))

status = ""

#funciton that submits the file and gets the job_id back form the phaster server
def submitToPhaster(filehandle):
    print("{:s} is submitting {:s}".format(sys.argv[0],filehandle.name))
    r = requests.post('http://phaster.ca/phaster_api',filehandle)
    try:
        data = json.loads(r.text)
    except ValueError as err:
        print("ValueError: {0}".format(err))
        print("This is the r.text"+"\n"+r.text)
    status = data['job_id']
    print("Got the jobid of {:s}".format(status))
    return status

#function that checks the status of the job_id
def checkstatus(jobid):
    r = requests.get('http://phaster.ca/phaster_api?acc='+jobid)
    data = json.loads(r.text)
    status = data['status']
    print("The job is {:s}".format(status))
    return status

#the main loop, submits the file, waits five minutes, checks and downloads if complete
jobid = submitToPhaster(fileIn)

while status != "Complete":
    print("Waiting 5 minutes")
    time.sleep(300)
    status = checkstatus(jobid)
    continue
else:
    r = requests.get('http://phaster.ca/submissions/'+jobid+'.zip', stream=True)
    with open(args['outPath']+fileNameOut,'wb') as fileOut:
        for chunk in r.iter_content(chunk_size=128):
            fileOut.write(chunk) #at the end of the stream file auto-closes

#keep extraction process separate from main loop
if args['extract'] == True: #NB: never extract a zipfile while its being streamed! have to close and then reopen
    fileOut = open(fileOut.name,'r')
    zip_ref = zipfile.ZipFile(fileOut)
    zip_ref.extractall(args['outPath']+extractDir)
    zip_ref.close()

   

print("End Time {:s}".format(time.ctime()))

fileIn.close()



#In [37]: data.keys()
#Out[37]: [u'status', u'url', u'job_id', u'zip', u'summary']



#!export FILE="../520.613.fna"
#
#!wget --post-file="$FILE" "http://phaster.ca/phaster_api" -O Output_filename
#
#!sleep 5
#
#!wget --post-file="../520.613.fna" "http://phaster.ca/phaster_api" -O Output_filename
